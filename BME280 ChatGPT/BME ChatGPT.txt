//	This is a Google Script that retrieves environmental data (datetime, temperature, heat index, humidity, dewpoint, pressure, and a difference value) from a web 
//  interface and appends it to a Google Spreadsheet. The sheet name is based on the current month and year, and a new sheet will be created with an additional number
//  if the sheet with the same name already exists. If it's the last day of the current month, a new sheet for the next month will be created. The script has several 
//  functions, including getting the name of the current month, creating a new sheet with the specified name, adding headers to the new sheet, and appending the data
//  to the sheet.  Script is designed to create a new sheet at the end of each month with the name of the month and the year. The year will be incremented by 1 if the // "flag" variable is set to 1. The "testForNextYear" function is supposed to update the "flag". The script checks if the current time is equal to the first day of 
//  the next year. If it is, the flag is set to 1.

//  Google Sheets App script created in parts by OpenAI.com, ChatGPT.  Additional code by William Lucid 02/01/202
  
  var sheet_id = "Replace with deployment_id";   
  const now = new Date();   
  var ss = SpreadsheetApp.openById(sheet_id);
  var sheet = ss.getSheetByName('January 2023');
  var month = now.getMonth();
  var i = 0;
  var flag = 0;

  function doGet(e){

	var headers = ['dtstamp','temp','heatindex','humidity','dewpoint','pressure','diff'];

	var dtstamp = String(e.parameter.dtstamp);
	var temp = Number(e.parameter.temp);
	var heatindex = Number(e.parameter.heatindex);
	var humidity = Number(e.parameter.humidity);
	var dewpoint = Number(e.parameter.dewpoint);
	var pressure = Number(e.parameter.pressure);
	var diff = Number(e.parameter.diff);

	testForNextYear()

	testForEndOfMonth(); 

	try {
		// Append the data to the sheet
		sheet.appendRow([dtstamp,temp,heatindex,humidity,dewpoint,pressure,diff]);
		} catch (error) {
			// If there is an error, create a new sheet with an additional number to the month name
			var sheetName = getMonthName(now.getMonth()) + " " + now.getFullYear();
			var newSheetName = sheetName;
			var i = 2;
			while(SpreadsheetApp.getActive().getSheetByName(newSheetName) != null) {
			newSheetName = sheetName + " " + i;
			i++;
		}
		sheet = SpreadsheetApp.getActive().insertSheet(newSheetName);
		// Add headers to the new sheet
		sheet.appendRow(headers);
		sheet.appendRow([dtstamp,temp,heatindex,humidity,dewpoint,pressure,diff]);
	}
	

	function getSheetForMonth(month) {
	  // Get the name of the sheet for the given month
	  var sheetName = getMonthName(month) + " " + now.getFullYear();
	  
	  // Get the sheet with the specified name, or create a new one if it doesn't exist
	  var sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
	  if (sheet == null) {
		sheet = SpreadsheetApp.getActive().insertSheet(sheetName);
		sheet.appendRow(["dtstamp","temp","heatindex","humidity","dewpoint","pressure","diff"]);
	  }	  
	  return sheet;
	}

	function getMonthName(month) {
	  // Get the name of the month for the given month number
	  var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
	  return monthNames[month];
	}
	
	function getSheetForMonth(month) {
    // Get the name of the sheet for the given month
    var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var sheetName = getMonthNames(month) + " " + now.getFullYear();
    // Get the sheet with the specified name, or create a new one if it doesn't exist
    var sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
    if (sheet == null) {
      sheet = SpreadsheetApp.getActive().insertSheet(sheetName);
      for (var i = 0; i < data.length; i++) {
      // Append the data to the sheet
      sheet.appendRow(headers);
      // Append the data to the sheet
      sheet.appendRow(["dtstamp","temp","heatindex","humidity","dewpoint","pressure","diff"]);
      }
    }    
    return sheet; 
  }

  function addNewSheetAtEndOfMonth() {
  var now = new Date();
	  if (now.getDate() === new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate()) {
		  var getyear = now.getFullYear();
		  Logger.log("flag:  " + flag);
		  if(flag === 1){
			getyear = now.getFullYear() + 1;
		  }else{
			getyear = now.getFullYear();
		  }          
		  var sheetName = getMonthName(now.getMonth() + 1) + " " + getyear;
		  var sheet = SpreadsheetApp.getActive().insertSheet(sheetName);
		  sheet.appendRow(headers);
		  for (var i = 0; i < data.length; i++) {
		  // Append the data to the sheet
		  sheet.appendRow(["dtstamp","temp","heatindex","humidity","dewpoint","pressure","diff"]);
		}  
	  }
	  flag = 0;
  }

  function testForEndOfMonth() {  
      // Get the current date
      var today = new Date();
      // Get the last day of the current month
      var lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
      // Set the time to midnight
      lastDay.setHours(0,0,0,0);
      Logger.log(lastDay);
      if ((today.getDate() == lastDay.getDate()) && (lastDay == lastDay.setHours(0,0,0,0))){
      Logger.log("Date is Midnight of the last day of the month.");
      addNewSheetAtEndOfMonth(month);
      } else {
      Logger.log("Not Midnight of the last day of the month.");
      }
  }

  function testForNextYear(){ 
      const now = new Date();
      var currentYear = now.getFullYear();
      // Get the current year
      var currentYear = now.getFullYear();
      // Get the following year
      var nextYear = currentYear + 1;
      /// Create a new Date object for the first day of the following year
      var firstDayOfNextYear = new Date(nextYear, 0, 1);
      //Create a new date object and increment the year by 1
      var newDate = new Date(now.getFullYear()+1, now.getMonth(), now.getDate());
      if(now  === firstDayOfNextYear){
      //Get the new sheet for the month
      var month = newDate.getMonth();
      flag = 1;
      addNewSheetAtEndOfMonth(month);      
      Logger.log("newYear sheet");
      }else{
      Logger.log("Not newYear");
      flag = 0;
    }
    return {flag};
  }  
}
